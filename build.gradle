buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://dl.bintray.com/ctoestreich/grails-plugins" } //Required until grails repo is fixed
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath "org.grails.plugins:views-gradle:1.1.6"
        // WSDL Support
        // classpath "org.grails.plugins:grails-cxf-client:3.0.3" //This line
    }
}

ext {
    grailsApps = ['sx-pos-server', 'sx-admin-server']
    grailsPlugins = ['sx-core-plugin', 'sx-firebase-plugin']
}

allprojects {

    version "2.0.0"
    group "lx.siipapx"

    apply plugin: 'idea'

    idea {
        module {
            outputDir file('build/classes/main')
            testOutputDir file('build/classes/test')
        }
    }
    if(project.convention.findPlugin(JavaPluginConvention)) {
        // Change the output directory for the main and test source sets back to the old path
        sourceSets.main.output.classesDir = new File(buildDir, "classes/main")
        sourceSets.test.output.classesDir = new File(buildDir, "classes/test")
    }
}

subprojects { project ->

    boolean isGrailsApp = grailsApps.contains(project.name)
    boolean isGrailsPlugin = grailsPlugins.contains(project.name)
    boolean isGrailsProject = isGrailsApp || isGrailsPlugin


    if (isGrailsProject) {

        if (isGrailsApp) {
            apply plugin:"idea"
            apply plugin:"war"
            apply plugin:"org.grails.grails-web"
            apply plugin:"org.grails.plugins.views-json"
        }

        if( isGrailsPlugin) {
            apply plugin:"org.grails.grails-plugin"
            apply plugin:"org.grails.grails-plugin-publish"
        }

        repositories {
            mavenLocal()
            maven { url "https://repo.grails.org/grails/core" }
            maven { url "https://dl.bintray.com/puneetbehl/plugins"}
            maven { url "http://dl.bintray.com/rcancino/cfdi"}
        }

        dependencies {
            compile "org.springframework.boot:spring-boot-starter-logging"
            compile "org.springframework.boot:spring-boot-autoconfigure"
            compile "org.grails:grails-core"
            console "org.grails:grails-console"

            compile 'org.codehaus.groovy:groovy-all:2.4.11'
            compile 'org.apache.commons:commons-lang3:3.1'

        }

        if ( isGrailsApp ) {
            dependencies {
                compile "org.springframework.boot:spring-boot-starter-actuator"
                compile "org.springframework.boot:spring-boot-starter-tomcat"
                compile "org.grails:grails-plugin-url-mappings"
                compile "org.grails:grails-plugin-rest"
                compile "org.grails:grails-plugin-codecs"
                compile "org.grails:grails-plugin-interceptors"
                compile "org.grails:grails-plugin-services"
                compile "org.grails:grails-plugin-datasource"
                compile "org.grails:grails-plugin-databinding"
                compile "org.grails:grails-web-boot"
                compile "org.grails:grails-logging"
                compile "org.grails.plugins:cache"
                compile "org.grails.plugins:async"
                compile "org.grails.plugins:events"
                compile "org.grails.plugins:hibernate5"
                compile "org.hibernate:hibernate-core:5.1.5.Final"
                compile "org.grails.plugins:views-json"
                compile "org.grails.plugins:views-json-templates"
                profile "org.grails.profiles:rest-api"
                runtime "org.glassfish.web:el-impl:2.1.2-b03"
                runtime "com.h2database:h2"
                runtime "org.apache.tomcat:tomcat-jdbc"
                testCompile "org.grails:grails-gorm-testing-support"
                testCompile "org.grails.plugins:geb"
                testCompile "org.grails:grails-datastore-rest-client"
                testCompile "org.grails:grails-web-testing-support"
                testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
                testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"
                runtime 'mysql:mysql-connector-java:5.1.29'
                testCompile 'org.grails:grails-datastore-rest-client'
            }
        }

        if ( isGrailsPlugin ) {
            dependencies {
                compile "org.springframework.boot:spring-boot-starter-actuator"
                compile "org.springframework.boot:spring-boot-starter-tomcat"
                compile "org.grails:grails-plugin-url-mappings"
                compile "org.grails:grails-plugin-rest"
                compile "org.grails:grails-plugin-codecs"
                compile "org.grails:grails-plugin-interceptors"
                compile "org.grails:grails-plugin-services"
                compile "org.grails:grails-plugin-datasource"
                compile "org.grails:grails-plugin-databinding"
                compile "org.grails:grails-web-boot"
                compile "org.grails:grails-logging"
                compile "org.grails.plugins:cache"
                compile "org.grails.plugins:async"
                compile "org.grails:grails-plugin-async"
                compile "org.grails.plugins:hibernate5"
                compile "org.hibernate:hibernate-core:5.1.5.Final"
                compile "org.grails.plugins:views-json"
                compile "org.grails.plugins:views-json-templates"
                profile "org.grails.profiles:rest-api-plugin"
                provided "org.grails:grails-plugin-services"
                provided "org.grails:grails-plugin-domain-class"
                provided "org.springframework.boot:spring-boot-starter-tomcat"
                runtime "org.glassfish.web:el-impl:2.1.2-b03"
                runtime "com.h2database:h2"
                runtime "org.apache.tomcat:tomcat-jdbc"
                testCompile "org.grails:grails-gorm-testing-support"
                testCompile "org.grails:grails-plugin-testing"
                testCompile "org.grails:grails-datastore-rest-client"
                testCompile "org.grails:grails-web-testing-support"
                testCompile "org.grails.plugins:geb"
                testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
                testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"

            }
        }
        /*
        bootRun {
            jvmArgs('-Dspring.output.ansi.enabled=always')
            jvmArgs = ['-Xmx1024m']
            systemProperties  System.properties
            addResources true
            String springProfilesActive = 'spring.profiles.active'
            systemProperty springProfilesActive, System.getProperty(springProfilesActive)
            systemProperties System.properties
        }

        springBoot {
            executable = true
        }

        war {
            String env = System.getProperty('grails.env') ?: 'prod'
            // war.baseName = "${rootProject.name}-${env.substring(0,4)}"
            war.baseName = "siipapx-${env}"
            war.version = ''
        }
        
        task buildConf() {
            doLast {
                String fileName = war.archiveName.replaceAll(".war", ".conf")
                File file = file("build/libs/${fileName}")
                file.append("JAVA_OPTS=-Xmx2048M")
                file.append("\nRUN_ARGS=\"--JDBC_CONNECTION_STRING=localhost/siipapx_oficinas --server.port=3036\"")
            }// url: jdbc:mysql://10.10.1.229:3306/siipapx_tacuba?autoReconnect=true
        }

        war.finalizedBy(buildConf)
        */

        if ( isGrailsPlugin ) {
            // enable if you wish to package this plugin as a standalone application
            bootRepackage.enabled = false
            grailsPublish {
                // TODO: Provide values here
                user = 'user'
                key = 'key'
                githubSlug = 'foo/bar'
                license {
                    name = 'Apache-2.0'
                }
                title = "My Plugin"
                desc = "Full plugin description"
                developers = [johndoe:"John Doe"]
                portalUser = ""
                portalPassword = ""
            }

        }

    }





}


